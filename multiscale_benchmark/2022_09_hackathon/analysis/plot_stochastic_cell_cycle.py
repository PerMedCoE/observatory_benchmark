import argparse
import pandas as pd
import os,re
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.pylab as pl
import numpy as np

def create_parser():
    parser = argparse.ArgumentParser(description="Create folders from input paths.")

    # Specify at least 3 folder paths as arguments
    parser.add_argument("--pc-csv", action="store", dest = "pc_csv",help="Path to the PhysiCell cell volumes for fixed cell cycle",
                        default="../Physicell/output/fixed_cell_cycle/cells_volumes.csv")
    # parser.add_argument("--bd-csv",action="store", dest = "bd_csv" ,help="Path to BioDynaMo cell volumes for fixed cell cycle",
    #                 default="../Biodynamo/unit_test_cellcycle/results/")
    parser.add_argument("--ch-csv",action="store", dest = "ch_csv", help="Path to Chaste cell volumes for fixed cell cycle",
                    default="../Chaste/unit_test_cellcycle/results/cellcycle_fixed.dat")
    # parser.add_argument("--ts-csv",action="store", dest = "ts_csv", help="Path to TiSim cell volumes for fixed cell cycle")

    return parser

def get_physicell_df(file):
    df = pd.read_csv(file,index_col=0,float_precision='round_trip').sort_values(by=['dt']).reset_index(drop=True)
    df['dt'] = df['dt']/60
    return df
def get_biodynamo_df(file):
    df = pd.read_csv(file,index_col=0,header = None,sep='\t|,',engine='python').rename(columns={1: "x1", 4: "x2"})

    return df
def get_tisim_df():
    tisim_arr = [1,1.00454,1.00902,1.01351,1.01801,1.02253,1.02706,1.0316,1.03616,1.04073,1.04531,1.04991,1.05452,1.05915,1.06378,1.06844,1.0731,1.07778,1.08247,1.08718,1.0919,1.09663,1.10138,1.10614,1.11091,1.1157,1.1205,1.12532,1.13014,1.13499,1.13984,1.14471,1.1496,1.1545,1.15941,1.16433,1.16927,1.17423,1.1792,1.18418,1.18917,1.19418,1.19921,1.20425,1.2093,1.21436,1.21944,1.22454,1.22965,1.23477,1.23991,1.24506,1.25022,1.2554,1.2606,1.26581,1.27103,1.27627,1.28152,1.28678,1.29206,1.29736,1.30267,1.30799,1.31333,1.31868,1.32405,1.32943,1.33483,1.34024,1.34566,1.3511,1.35656,1.36203,1.36751,1.37301,1.37852,1.38405,1.38959,1.39515,1.40072,1.40631,1.41191,1.41753,1.42316,1.42881,1.43447,1.44015,1.44584,1.45155,1.45727,1.463,1.46876,1.47452,1.4803,1.4861,1.49191,1.49774,1.50358,1.50944,1.51531,1.5212,1.5271,1.53302,1.53895,1.5449,1.55087,1.55685,1.56284,1.56885,1.57488,1.58092,1.58698,1.59305,1.59913,1.60524,1.61136,1.61749,1.62364,1.6298,1.63598,1.64218,1.64839,1.65462,1.66086,1.66712,1.6734,1.67969,1.68599,1.69231,1.69865,1.70501,1.71137,1.71776,1.72416,1.73058,1.73701,1.74346,1.74992,1.7564,1.7629,1.76941,1.77594,1.78248,1.78905,1.79562,1.80221,1.80882,1.81545,1.82209,1.82875,1.83542,1.84211,1.84882,1.85554,1.86228,1.86903,1.8758,1.88259,1.88939,1.89621,1.90305,1.9099,1.91677,1.92366,1.93056,1.93748,1.94441,1.95137,1.95833,1.96532,1.97232,1.97934,1.98637,1.99343,1.99625,1.759,1.54133,1.34241,1.16138,1,1.00443,1.0089,1.01339,1.0179,1.02241,1.02694,1.03149,1.03604,1.04061,1.0452,1.0498,1.05441,1.05903,1.06367,1.06832,1.07298,1.07766,1.08235,1.08706,1.09178,1.09651,1.10126,1.10602,1.11079,1.11558,1.12038,1.12519,1.13002,1.13487,1.13972,1.14459,1.14948,1.15437,1.15929,1.16421,1.16915,1.1741,1.17907,1.18405,1.18905,1.19406,1.19908,1.20412,1.20917,1.21424,1.21932,1.22441,1.22952,1.23464,1.23978,1.24493,1.2501,1.25527,1.26047,1.26568,1.2709,1.27614,1.28139,1.28665,1.29193,1.29723,1.30254,1.30786,1.3132,1.31855,1.32392,1.3293,1.33469,1.3401,1.34553,1.35097,1.35642,1.36189,1.36737,1.37287,1.37839,1.38391,1.38946,1.39501,1.40059,1.40617,1.41177,1.41739,1.42302,1.42867,1.43433,1.44001,1.4457,1.4514,1.45712,1.46286,1.46861,1.47438,1.48016,1.48596,1.49177,1.49759,1.50344,1.50929,1.51517,1.52105,1.52696,1.53287,1.53881,1.54475,1.55072,1.5567,1.56269,1.5687,1.57473,1.58077,1.58682,1.5929,1.59898,1.60508,1.6112,1.61734,1.62349,1.62965,1.63583,1.64203,1.64824,1.65446,1.66071,1.66697,1.67324,1.67953,1.68583,1.69216,1.69849,1.70485,1.71121,1.7176,1.724,1.73042,1.73685,1.7433,1.74976,1.75624,1.76274,1.76925,1.77578,1.78232,1.78888,1.79546,1.80205,1.80866,1.81528,1.82192,1.82858,1.83525,1.84194,1.84865,1.85537,1.86211,1.86886,1.87563,1.88242,1.88922,1.89604,1.90288,1.90973,1.9166,1.92349,1.93039,1.93731,1.94424,1.95119,1.95816,1.96515,1.97215,1.97916,1.9862,1.99325,2.00034,1.76469,1.54654,1.34716,1.16569,1.0013,1.00439,1.00887,1.01336,1.01786,1.02238,1.02691,1.03145,1.03601,1.04058,1.04516,1.04976,1.05437,1.05899,1.06363,1.06828,1.07295,1.07762,1.08231,1.08702,1.09174,1.09647,1.10122,1.10598,1.11075,1.11554,1.12034,1.12515,1.12998,1.13483,1.13968,1.14455,1.14944,1.15433,1.15924,1.16417,1.16911,1.17406,1.17903,1.18401,1.18901,1.19402,1.19904,1.20408,1.20913,1.2142,1.21928,1.22437,1.22948,1.2346,1.23974,1.24489,1.25005,1.25523,1.26043,1.26563,1.27086,1.27609,1.28134,1.28661,1.29189,1.29718,1.30249,1.30781,1.31315,1.3185,1.32387,1.32925,1.33465,1.34006,1.34548,1.35092,1.35638,1.36184,1.36733,1.37283,1.37834,1.38387,1.38941,1.39497,1.40054,1.40613,1.41173,1.41734,1.42297,1.42862,1.43428,1.43996,1.44565,1.45136,1.45708,1.46281,1.46856,1.47433,1.48011,1.48591,1.49172,1.49755,1.50339,1.50924,1.51512,1.521,1.52691,1.53282,1.53876,1.54471,1.55067,1.55665,1.56264,1.56865,1.57468,1.58072,1.58677,1.59284,1.59893,1.60503,1.61115,1.61728,1.62343,1.6296,1.63578]
    print(len(tisim_arr))
    tisim_arr = [x*100 for x in tisim_arr]
    tisim_dt = [x/60 for x in range(0,2881,6)]
    df = pd.DataFrame({'dt': tisim_dt, 'volumes': tisim_arr})
    return df
def get_chaste_df(file):
    # df = pd.read_csv(file,header = None,sep='\t',index_col=0,engine='python')
    with open(file, "r") as f:
        df = pd.DataFrame(columns=["dt","id","x","y","z","g1_duration","s_duration","g2_duration","m_duration","current_phase","target_area","volume"])
        for line in f.read().splitlines():
            data = line.split()
            data = [float(x) if x.replace('.', '', 1).isdigit() else x for x in data]
            dt = data[0]
            for i in range(0,len(data)//11):
                row = {'dt': dt, 'id': data[1+11*i], 'x': data[2+11*i], 'y': data[3+11*i], 'z': data[4+11*i], 'g1_duration': data[5+11*i], 's_duration': data[6+11*i], 'g2_duration': data[7+11*i], 'm_duration': data[8+11*i], 'current_phase': data[9+11*i], 'target_area': data[10+11*i], 'volume': data[11+11*i]}
                row = pd.Series(row)
                df2 = pd.DataFrame(row).transpose()

                df =pd.concat([df,df2],ignore_index=True)
        return df



def plot(pc_df,ch_df,ts_df):
    fig,ax = plt.subplots()
    # plot Physicell
    pc_init_vol = pc_df.iloc[0,4]
    pc_group =  pc_df.groupby(['id']).groups.items()
    num_cels = len(pc_group)
    colors = pl.cm.Greens(np.linspace(0,1,num_cels*2))
    j=2
    for cell_id,idx in pc_group:
        vols = []
        dts = []
        for i in idx.values:
            vols.append((pc_df.loc[i,'total_volume']/pc_init_vol)*100)
            dts.append(pc_df.loc[i,'dt'])
        # plt.plot(dts,vols,label="PhysiCell", color=colors[j] ,linewidth=2)
        if cell_id!=num_cels-1:
            plt.plot(dts,vols, color=colors[j] ,linewidth=2)
        else:
            plt.plot(dts,vols, color=colors[j],label = 'PhysiCell' ,linewidth=2)
        j+=1
    # plot get_tisim_df
    colors = pl.cm.YlOrBr(np.linspace(0,1,10))
    v1=[1,1.0202,1.04068,1.06142,1.08244,1.10068,1.12222,1.14403,1.16612,1.18528,1.2079,1.23081,1.25067,1.27411,1.29785,1.32187,1.34619,1.36728,1.39215,1.41732,1.44279,1.46487,1.49091,1.51725,1.54391,1.567,1.59423,1.62178,1.64964,1.67377,1.70223,1.731,1.76009,1.78529,1.81499,1.84501,1.87537,1.90165,1.93262,1.96393,1.99557,1.01363,1.03507,1.05369,1.07569,1.09799,1.12061,1.14023,1.16342,1.18692,1.21073,1.23139,1.25579,1.28052,1.30556,1.32728,1.35293,1.37891,1.40522,1.42803,1.45496,1.48222,1.50982,1.53375,1.56199,1.59057,1.61949,1.64456,1.67414,1.70407,1.73435,1.76059,1.79154,1.82284,1.85451,1.88195,1.9143,1.94701,1.9801,1,1.0117,1.02942,1.05035,1.07157,1.09307,1.11173,1.13376,1.15608,1.17869,1.19831,1.22146,1.24492,1.26867,1.28927,1.31358,1.33819,1.36311,1.38472,1.41021,1.43602,1.46213]
    t1=[0,0.497778,0.995556,1.49333,1.99111,2.41778,2.91556,3.41333,3.91111,4.33778,4.83556,5.33333,5.76,6.25778,6.75556,7.25333,7.75111,8.17778,8.67556,9.17333,9.67111,10.0978,10.5956,11.0933,11.5911,12.0178,12.5156,13.0133,13.5111,13.9378,14.4356,14.9333,15.4311,15.8578,16.3556,16.8533,17.3511,17.7778,18.2756,18.7733,19.2711,19.7333,20.2311,20.6578,21.1556,21.6533,22.1511,22.5778,23.0756,23.5733,24.0711,24.4978,24.9956,25.4933,25.9911,26.4178,26.9156,27.4133,27.9111,28.3378,28.8356,29.3333,29.8311,30.2578,30.7556,31.2533,31.7511,32.1778,32.6756,33.1733,33.6711,34.0978,34.5956,35.0933,35.5911,36.0178,36.5156,37.0133,37.5111,37.9733,38.4711,38.8978,39.3956,39.8933,40.3911,40.8178,41.3156,41.8133,42.3111,42.7378,43.2356,43.7333,44.2311,44.6578,45.1556,45.6533,46.1511,46.5778,47.0756,47.5733,48.0711]
    plt.plot(t1,[100*x for x in v1], color=colors[2],label='TiSim' ,linewidth=2)

    v2=[1.01641,1.04229,1.06481,1.0915,1.11864,1.14621,1.17021,1.19863,1.2275,1.25683,1.28234,1.31254,1.3432,1.37434,1.40141,1.43344,1.46596,1.49896,1.52764,1.56156,1.59598,1.6309,1.66123,1.69709,1.73346,1.77035,1.80238,1.84024,1.87863,1.91754,1.95132,1.99123,1.01341,1.03238,1.04882,1.06823,1.08788,1.10776,1.12644,1.14679,1.16443,1.18523,1.20628,1.22758,1.24603,1.2678,1.28981,1.31208,1.33137,1.35411,1.37711,1.40037,1.42051,1.44425,1.46826,1.49253,1.51355,1.53831,1.56335,1.58865]
    t2=[19.7333,20.2311,20.6578,21.1556,21.6533,22.1511,22.5778,23.0756,23.5733,24.0711,24.4978,24.9956,25.4933,25.9911,26.4178,26.9156,27.4133,27.9111,28.3378,28.8356,29.3333,29.8311,30.2578,30.7556,31.2533,31.7511,32.1778,32.6756,33.1733,33.6711,34.0978,34.5956,35.0933,35.5911,36.0178,36.5156,37.0133,37.5111,37.9733,38.4711,38.8978,39.3956,39.8933,40.3911,40.8178,41.3156,41.8133,42.3111,42.7378,43.2356,43.7333,44.2311,44.6578,45.1556,45.6533,46.1511,46.5778,47.0756,47.5733,48.0711]
    plt.plot(t2,[100*x for x in v2], color=colors[4],linewidth=2)

    v3=[1.01348,1.03256,1.0491,1.06862,1.08838,1.10839,1.12718,1.14765,1.1654,1.18633,1.20752,1.22895,1.24752,1.26942,1.29158,1.31399,1.33341,1.35631,1.37946,1.40288,1.42316,1.44706,1.47124,1.49568,1.51684,1.54178,1.567,1.59249]
    t3=[35.0933,35.5911,36.0178,36.5156,37.0133,37.5111,37.9733,38.4711,38.8978,39.3956,39.8933,40.3911,40.8178,41.3156,41.8133,42.3111,42.7378,43.2356,43.7333,44.2311,44.6578,45.1556,45.6533,46.1511,46.5778,47.0756,47.5733,48.0711]
    plt.plot(t3,[100*x for x in v3], color=colors[6],linewidth=2)

    v4=[1,1.01129,1.02838,1.04857,1.06902,1.08973,1.10769,1.1289,1.15038,1.17212,1.19098,1.21323,1.23576,1.25857,1.27834,1.30166,1.32527,1.34916,1.36987,1.39429,1.419,1.444]
    t4=[37.9733,38.4711,38.8978,39.3956,39.8933,40.3911,40.8178,41.3156,41.8133,42.3111,42.7378,43.2356,43.7333,44.2311,44.6578,45.1556,45.6533,46.1511,46.5778,47.0756,47.5733,48.0711]
    plt.plot(t4,[100*x for x in v4], color=colors[8] ,linewidth=2)
    # plot Chaste
    ch_init_vol = ch_df.iloc[0,11]*1000
    ch_group =  ch_df.groupby(['id']).groups.items()
    num_cels = len(ch_group)
    colors = pl.cm.Blues(np.linspace(0,1,num_cels*2))
    j=4
    for cell_id,idx in ch_group:
        vols = []
        dts = []
        for i in idx.values:
            vols.append(((ch_df.loc[i,'volume']*1000)/ch_init_vol)*100)
            dts.append(ch_df.loc[i,'dt'])
        if cell_id!=num_cels-1:
            plt.plot(dts,vols, color=colors[j] ,linewidth=2)
        else:
            plt.plot(dts,vols, color=colors[j],label='Chaste' ,linewidth=2)

        j+=1

    plt.xlabel(xlabel="Time (hours)",fontsize=12,color = '#262626')
    plt.ylabel(ylabel="Percentage of initial volume",fontsize=12,color = '#262626')
    plt.title(label = 'Stochastic Cell Cycle Percentage',color = '#262626')
    ax.legend(bbox_to_anchor = (1.0,1.0),loc='upper left')
    plt.tight_layout()
    plt.savefig("stohastic_cell_cycle_volumes.png",dpi=200)
    plt.show()
    return
def main():
    parser = create_parser()
    args = parser.parse_args()
    pc_df = get_physicell_df(args.pc_csv)
    # ts_df = get_tisim_df()
    ch_df = get_chaste_df(args.ch_csv)
    print(pc_df)
    plot(pc_df,ch_df)

    return

if __name__ == "__main__":
    main()
